=== week 1: playing, brainstorming, basic design
% play, brainstorm, basically design

=== week 2: have it playable on desktop, with fun, somewhat fast matches (0.5-2h)
% makefile
% client refactor
   % gulpfile and folder structure
   % scss
   % react instead of manually changing innerHTML
% use for testing (forms, communication, etc): allow changing the name of your planet
% design
   % basic resources
   % basic buildings
% build interface
% basic buildings
% server refactor
   % unhack communication: type Message
   % forbid changing resources you don't own: planet name, buildings
   % forbid building in built places
% tick pt I
   % pop/cattle growth
   % building effects
% design: basic ship gameplay
% ships
   % building
   % colonizing

=== week 3
% sell buildings
% position has to be float: int is too sensitive to truncations: can't move on angles which are weird fractions
% combat/conquering pt I
   % boarding (expensive in personnel)
      % basic soldiers
      % basic transporting and boarding interface
      % basic combat rules
% make ships go back to origin when applicable: invalid destination
% buildings should not be built instantly

=== week 4
% units should not be trained instantly: queue
- refactor server
   % trainUnit, buildShip -> train
   - modularize commands: handleWebsocket should only talk about network, call methods to do the work
   - horrible long names in variables in handleWebsockets: create shortcuts
   - map[string]stuff: all balance data should be in a big table indexed by type (later enums)
      - client should get costs from server (only one place to change values)
   - removed units/ships really be removed: pay attention to the fact that the list changing will break the tick loop
   - server should answer all messages, at least with 'ok' or 'fail', etc
   - too much data going around: network problems on some clients
      - client should receive data directly from tick
      - test from l2labs
- necessary interface upgrades: select multiple planets
   - queue units in multiple planets
   - attack from multiple planets at once
   - multi/auto-load: easy to put your dudes in ships to attack
      - maybe should be a little manual (planet by planet?): it's fun preparing to attack
- tidy up visuals pt I
   - zoom in/out?
   - background stars
   - planet effects
- refactor client: buildingInterface is a big sausage
- content part I
   - upgrades
      - additional hq build queue
      - more efficient shit: specialization on hq, can't do more than one
   - planet effects
      - different sizes
   - alliances: allow friendly units from other players
   - tech tree?
   - fog of war?
   - combat pt II
      - long distance ballistics (expensive in obtanium): maximum distance?
         - carriers: can be targeted and boarded themselves
      - fighters? ways to destroy ships before they land?
   - ships and units
      - more combat ships and units
      - more support ships and units? scouts/spies, commerce, propagandists, whatever
- balance: make it fun with varied viable strats
   - empty squares generate resources
   - limit obtanium per planet: promotes non-turtling
   - scale factors: e.g. multiple generators together are more efficient: promotes specialized planets, more varied gameplay
      - implementation idea: upgrades per planet - makes you want to have same type of buildings in a planet
- lobby
   - integrated chat
- refactor interface: has to be easy to manage all your planets and ships and whatever
   - convoys
   - easy "jump between my planets" button
   - easy "jump between my ships" button
   - auto-attack, auto-load: some way for units to keep attacking and re-attacking a planet
=== extra
- persist
- has to test if building is allowed to build unit: API may be abused
- units should consume food too
   - what if they're in ships? what if they're docked?
- make ships in other peoples' planets be usable: e.g. rescue dudes losing a battle
- server (handleWebsocket) should test if things exists before trying to access stuff like ship[params.shipId]
- server should not create buildings with inexistent types!
- client should recommend good numbers of crew and cargo
- horrible hack: ships who disappear become owned by user -1
- content part II
   - different races
   - items
   - buildings
- run ok on mobile
   - no pinch to zoom
   - manifest
      - full screen
      - landscape
- communication refactor
      - client should not let you TRY to change resources you don't own: shouldn't show edit button on name, click to build, etc
   - maybe client should test type of messages received? registered player, new tick, etc
   - ___reconnect___ hack: using color to send the id, yadda yadda; should use Message
   - check for errors when converting types and etc: grep _
- tidy up visuals pt II
   - decent font
   - bootstrap
   - window effects: animated transitions, transparencies, etc

# FALTA
- bug ARGXYZ
- refactor do canvas?
- evitar concorrência nos ticks (usar canais como mutex)
- autenticação decente: JWT?
- implementar CheckOrigin
- não enviar pela API dados a que o jogador não tem acesso

# axiomas
- mundo persistente, coisas colecionáveis, números que sobem
- inicialmente browser-based {gladiatus}
- free to play, micropayments de variedade/estética/possivelmente vantagens? {lol}
- viral através de sacanagens sociais {candy crush}
- mínimo de arte inicial
- cretino
- mais ícones + menos texto = mais o chinês joga
